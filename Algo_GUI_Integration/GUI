from PyQt5 import QtWidgets, QtGui
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QLabel, QComboBox, QPushButton
from PyQt5.QtGui import QFont
import sys
import math

font_title = QFont('Athelas', 16)
font_title.setBold(True)

font_button = QFont('Athelas', 12)


class Joystick(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)

        # Set joystick properties
        self.joystick_radius = 25
        self.joystick_position = [100, 100]  # Starting position of the joystick (center of the widget)
        self.circle_radius = 100  # Radius of the circular joystick area
        self.setFixedSize(self.circle_radius * 2, self.circle_radius * 2)  # Size of the joystick area (diameter)

    def paintEvent(self, event):
        painter = QtGui.QPainter(self)
        painter.setRenderHint(QtGui.QPainter.Antialiasing)

        # Draw circular background (joystick area)
        painter.setBrush(QtGui.QBrush(QtGui.QColor(220, 220, 220)))
        painter.drawEllipse(0, 0, self.circle_radius * 2, self.circle_radius * 2)

        # Draw the joystick (movable circle) with integer values
        painter.setBrush(QtGui.QBrush(QtGui.QColor(50, 50, 250)))
        painter.drawEllipse(int(self.joystick_position[0] - self.joystick_radius),
                            int(self.joystick_position[1] - self.joystick_radius),
                            int(self.joystick_radius * 2),
                            int(self.joystick_radius * 2))

    def mouseMoveEvent(self, event):
        # Get the current mouse position relative to the widget
        x = event.x()
        y = event.y()

        # Calculate the distance from the center of the circle (circle_radius, circle_radius)
        distance = math.sqrt((x - self.circle_radius) ** 2 + (y - self.circle_radius) ** 2)

        # If the distance is within the circle radius, update the joystick position
        if distance <= self.circle_radius - self.joystick_radius:
            self.joystick_position = [x, y]
        else:
            # Restrict movement to the edge of the circle
            angle = math.atan2(y - self.circle_radius, x - self.circle_radius)
            self.joystick_position = [
                self.circle_radius + (self.circle_radius - self.joystick_radius) * math.cos(angle),
                self.circle_radius + (self.circle_radius - self.joystick_radius) * math.sin(angle)
            ]

        self.update()  # Trigger paintEvent to redraw the joystick

    def mouseReleaseEvent(self, event):
        # Return the joystick to the center when the mouse is released
        self.joystick_position = [self.circle_radius, self.circle_radius]
        self.update()


class CustomizeWidget(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)

        # Set properties for the embedded window
        self.setAutoFillBackground(True)
        palette = self.palette()
        palette.setColor(self.backgroundRole(), QtGui.QColor('white'))
        self.setPalette(palette)
        
        # Set widget size and position to cover the dropdown lists
        self.setGeometry(700, 30, 450, 350)

        # Add a label
        self.label_customersetting = QLabel("Customize Settings:", self)
        self.label_customersetting.setFont(font_title)
        self.label_customersetting.adjustSize()
        self.label_customersetting.move(20, 30)

        # Add a close button
        self.close_button = QPushButton("Close", self)
        self.close_button.setFont(font_button)
        self.close_button.setGeometry(175, 300, 100, 40)
        self.close_button.clicked.connect(self.hide)  # Hide the widget when close button is clicked

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        # Set up the main window properties
        self.setWindowTitle("Navigation System")
        self.setGeometry(400, 200, 1200, 700)

        self.original_width = 1200
        self.original_height = 700

        self.central_widget = QWidget(self)
        self.setCentralWidget(self.central_widget)

        # Command Label
        self.label_command = QLabel(self.central_widget)
        self.label_command.setText("Command:")
        self.label_command.setFont(font_title)
        self.label_command.adjustSize()
        self.label_command.move(700, 30)

        # Command buttons
        self.btn_start = QtWidgets.QPushButton("Start", self.central_widget)
        self.btn_start.setFont(font_button)
        self.btn_start.move(700, 70)

        self.btn_pause = QtWidgets.QPushButton("Pause", self.central_widget)
        self.btn_pause.setFont(font_button)
        self.btn_pause.move(820, 70)

        self.btn_manual = QtWidgets.QPushButton("Manual", self.central_widget)
        self.btn_manual.setFont(font_button)
        self.btn_manual.move(700, 110)

        self.btn_automatic = QtWidgets.QPushButton("Automatic", self.central_widget)
        self.btn_automatic.setFont(font_button)
        self.btn_automatic.move(820, 110)

        # Joystick
        self.joystick = Joystick(self.central_widget)
        self.joystick.move(700, 160)

        # Map selection
        self.map_select = QComboBox(self)
        self.map_select.setGeometry(1000, 70, 150, 30)

        self.map_select.addItem("Map 1")
        self.map_select.addItem("Map 2")
        self.map_select.addItem("Map 3")
        self.map_select.addItem("Map 4")
        self.map_select.addItem("Map 5")
        self.map_select.addItem("Customize")
        self.map_select.currentIndexChanged.connect(self.map_changed)

        # Ship size selection
        self.ship_select = QComboBox(self)
        self.ship_select.setGeometry(1000, 120, 150, 30)

        self.ship_select.addItem("Small Ship")
        self.ship_select.addItem("Medium Ship")
        self.ship_select.addItem("Large Ship")

        # Velocity control
        self.label_control = QLabel(self.central_widget)
        self.label_control.setText("Locate:")
        self.label_control.setFont(font_title)
        self.label_control.adjustSize()
        self.label_control.move(980, 200)

        self.btn_accelerate = QtWidgets.QPushButton("Start Point", self.central_widget)
        self.btn_accelerate.setFont(font_button)
        self.btn_accelerate.move(980, 240)

        self.btn_decelerate = QtWidgets.QPushButton("End Point", self.central_widget)
        self.btn_decelerate.setFont(font_button)
        self.btn_decelerate.move(980, 280)

        # Map
        self.label_map = QLabel(self.central_widget)
        self.label_map.setText("Map:")
        self.label_map.setFont(font_title)
        self.label_map.adjustSize()
        self.label_map.move(50, 30)

        self.map = QWidget(self.central_widget)
        self.map.setStyleSheet("background-color: white; border: 1px solid black;")
        self.map.setGeometry(50, 80, 600, 570)

        # Buttons for additional windows
        self.btn_dashboard = QtWidgets.QPushButton("Dashboard", self.central_widget)
        self.btn_dashboard.setFont(font_button)
        self.btn_dashboard.move(700, 400)

        self.btn_notification = QtWidgets.QPushButton("Notification", self.central_widget)
        self.btn_notification.setFont(font_button)
        self.btn_notification.move(800, 400)

        self.btn_sensor_data = QtWidgets.QPushButton("Sensor data", self.central_widget)
        self.btn_sensor_data.setFont(font_button)
        self.btn_sensor_data.move(930, 400)

        # Create unique windows for each button
        self.dashboard_window = QWidget(self)
        self.dashboard_window.setStyleSheet("background-color: white; border: 1px solid black;")
        self.dashboard_window.setGeometry(700, 430, 450, 220)
        self.dashboard_label = QLabel("Dashboard", self.dashboard_window)
        self.dashboard_label.move(10, 10)

        self.notification_window = QWidget(self)
        self.notification_window.setStyleSheet("background-color: white; border: 1px solid black;")
        self.notification_window.setGeometry(700, 430, 450, 220)
        self.notification_label = QLabel("Notifications", self.notification_window)
        self.notification_label.move(10, 10)

        self.sensor_data_window = QWidget(self)
        self.sensor_data_window.setStyleSheet("background-color: white; border: 1px solid black;")
        self.sensor_data_window.setGeometry(700, 430, 450, 220)
        self.sensor_data_label = QLabel("Sensor Data", self.sensor_data_window)
        self.sensor_data_label.move(10, 10)

        # Initially hide all the windows
        self.notification_window.hide()
        self.sensor_data_window.hide()

        # Connect button clicks to show the corresponding window
        self.btn_dashboard.clicked.connect(lambda: self.show_window(self.dashboard_window))
        self.btn_notification.clicked.connect(lambda: self.show_window(self.notification_window))
        self.btn_sensor_data.clicked.connect(lambda: self.show_window(self.sensor_data_window))

        # Customize widget (hidden by default)
        self.customize_widget = CustomizeWidget(self.central_widget)
        self.customize_widget.hide()  # Initially hidden

    def show_window(self, window):
        # Hide all other windows
        self.dashboard_window.hide()
        self.notification_window.hide()
        self.sensor_data_window.hide()

        # Show the selected window
        window.show()

    def map_changed(self):
        if self.map_select.currentText() == "Customize":
            self.show_customize_widget()

    def show_customize_widget(self):
        self.customize_widget.show()
        self.customize_widget.raise_()

    def resizeEvent(self, event):
        new_width = self.width()
        new_height = self.height()

        # Calculate scale factors
        scale_x = new_width / self.original_width
        scale_y = new_height / self.original_height

        # Scale and move widgets proportionally
        self.label_command.move(int(700 * scale_x), int(30 * scale_y))
        self.btn_start.move(int(700 * scale_x), int(70 * scale_y))
        self.btn_pause.move(int(820 * scale_x), int(70 * scale_y))
        self.btn_manual.move(int(700 * scale_x), int(110 * scale_y))
        self.btn_automatic.move(int(820 * scale_x), int(110 * scale_y))
        self.joystick.move(int(700 * scale_x), int(160 * scale_y))
        self.label_control.move(int(980 * scale_x), int(200 * scale_y))
        self.btn_accelerate.move(int(980 * scale_x), int(240 * scale_y))
        self.btn_decelerate.move(int(980 * scale_x), int(280 * scale_y))
        self.label_map.move(int(50 * scale_x), int(30 * scale_y))
        self.map.setGeometry(int(50 * scale_x), int(80 * scale_y), int(600 * scale_x), int(570 * scale_y))

        self.btn_dashboard.move(int(700 * scale_x), int(400 * scale_y))
        self.btn_notification.move(int(800 * scale_x), int(400 * scale_y))
        self.btn_sensor_data.move(int(930 * scale_x), int(400 * scale_y))

        self.map_select.setGeometry(int(1000 * scale_x), int(70 * scale_y), int(150 * scale_x), int(30 * scale_y))
        self.ship_select.setGeometry(int(1000 * scale_x), int(120 * scale_y), int(150 * scale_x), int(30 * scale_y))

        # Adjust window size
        for window in [self.dashboard_window, self.notification_window, self.sensor_data_window]:
            window.setGeometry(int(700 * scale_x), int(430 * scale_y), int(450 * scale_x), int(220 * scale_y))


def main():
    app = QApplication(sys.argv)
    main_window = MainWindow()
    main_window.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
